/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Domain.Grn;
import Domain.GrnRegistry;
import Domain.Products;
import Domain.Stocks;
import Domain.Vendor;
import Domain.batch;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Shiyanrox
 */
public class GRN extends javax.swing.JFrame {

    /**
     * Creates new form GRN
     */
    public GRN() {
        initComponents();
        this.setID();
        this.loadComboBatch();
        this.loadComboVendor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtGRNNo = new javax.swing.JTextField();
        dcGRN = new com.toedter.calendar.JDateChooser();
        ddlVendor = new javax.swing.JComboBox();
        ddlBatch = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txtPOno = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtGRNSerach = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductSelect = new javax.swing.JTable();
        txtBPrice = new javax.swing.JTextField();
        txtSPrice = new javax.swing.JTextField();
        txtQty = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        lblPID = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblGRN = new javax.swing.JTable();
        btnRmvItem = new javax.swing.JButton();
        btnRmvAll = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        txtTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DistributerX: GRN");

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("GRN"));

        jLabel1.setText("GRN No");

        jLabel2.setText("Date");

        jLabel3.setText("Vendor");

        jLabel4.setText("Batch");

        txtGRNNo.setEditable(false);

        ddlVendor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ddlVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlVendorActionPerformed(evt);
            }
        });

        ddlBatch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel10.setText("PO No");

        txtPOno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPOnoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtGRNNo, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel10))
                    .addComponent(ddlVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(txtPOno, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dcGRN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ddlBatch, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcGRN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(txtGRNNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(txtPOno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(ddlVendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4)
                    .addComponent(ddlBatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel5.setText("Search");

        txtGRNSerach.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGRNSerachKeyReleased(evt);
            }
        });

        tblProductSelect.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Code", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProductSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblProductSelectMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblProductSelect);
        if (tblProductSelect.getColumnModel().getColumnCount() > 0) {
            tblProductSelect.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        txtBPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBPriceKeyTyped(evt);
            }
        });

        txtSPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSPriceKeyTyped(evt);
            }
        });

        txtQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQtyKeyTyped(evt);
            }
        });

        jLabel6.setText("Buying Price");

        jLabel7.setText("Selling Price");

        jLabel8.setText("Qty");

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Entypo_2b(1)_24.png"))); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblPID.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblDescription.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtGRNSerach))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtQty, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                                .addComponent(txtBPrice, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(txtSPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblPID, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtGRNSerach, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPID, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, 0)
                        .addComponent(txtQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAdd))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(0, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblGRN.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "P.Code", "Description", "Buying Price", "Selling Price", "Qty", "Amount"
            }
        ));
        jScrollPane2.setViewportView(tblGRN);
        if (tblGRN.getColumnModel().getColumnCount() > 0) {
            tblGRN.getColumnModel().getColumn(0).setMaxWidth(30);
            tblGRN.getColumnModel().getColumn(1).setMaxWidth(50);
            tblGRN.getColumnModel().getColumn(5).setMaxWidth(50);
        }

        btnRmvItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f068(0)_24.png"))); // NOI18N
        btnRmvItem.setText("Remove Item");
        btnRmvItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRmvItemActionPerformed(evt);
            }
        });

        btnRmvAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f00d(0)_24.png"))); // NOI18N
        btnRmvAll.setText("Remove All");
        btnRmvAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRmvAllActionPerformed(evt);
            }
        });

        btnGenerate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f085(1)_24.png"))); // NOI18N
        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f05c(0)_24.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtTotal.setEditable(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Total");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnRmvItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRmvAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 226, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGenerate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRmvItem)
                    .addComponent(btnRmvAll)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnGenerate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(4, 4, 4))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ddlVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlVendorActionPerformed
        this.loadTableByVendorAndSearch(txtGRNSerach.getText(), ddlVendor.getSelectedItem().toString());
    }//GEN-LAST:event_ddlVendorActionPerformed

    private void txtGRNSerachKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGRNSerachKeyReleased
        this.loadTableByVendorAndSearch(txtGRNSerach.getText(), ddlVendor.getSelectedItem().toString());
    }//GEN-LAST:event_txtGRNSerachKeyReleased

    private void tblProductSelectMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductSelectMouseReleased

        String item = tblProductSelect.getModel().getValueAt(tblProductSelect.getSelectedRow(), 0).toString();
        String itemV = tblProductSelect.getModel().getValueAt(tblProductSelect.getSelectedRow(), 1).toString();
        lblPID.setText(item);
        lblDescription.setText(itemV);

    }//GEN-LAST:event_tblProductSelectMouseReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (txtBPrice.getText().isEmpty() | txtSPrice.getText().isEmpty() | txtQty.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Buying Price, Selling Price And Qty Cannot be Empty!", "Data Missing", JOptionPane.ERROR_MESSAGE);
        } else {
            int count = tblGRN.getRowCount();
            DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();
            boolean check = false;
            int raw = 0;
            int tbRaw = 0;
            while (count > raw) {
                if (Integer.parseInt(dtm.getValueAt(raw, 1).toString()) == Integer.parseInt(lblPID.getText())) {
                    check = true;
                    tbRaw = raw;

                }
                raw++;
            }
            if (check) {
                int currentQty = Integer.parseInt(dtm.getValueAt(tbRaw, 5).toString());
                int newQty = currentQty + Integer.parseInt(txtQty.getText());
                dtm.setValueAt(newQty, tbRaw, 5);
                dtm.setValueAt(newQty * Float.parseFloat(txtBPrice.getText()), tbRaw, 6);
            } else {

                count++;

                Vector v = new Vector();
                v.add(count);
                v.add(lblPID.getText());
                v.add(lblDescription.getText());
                v.add(txtBPrice.getText());
                v.add(txtSPrice.getText());
                v.add(txtQty.getText());
                v.add(Integer.parseInt(txtQty.getText()) * Float.parseFloat(txtBPrice.getText()));
                dtm.addRow(v);
            }
            lblPID.setText("");
            lblDescription.setText("");
            txtQty.setText("");
            txtBPrice.setText("");
            txtSPrice.setText("");

            float total = this.calTotal(tblGRN, 6);
            txtTotal.setText(total + "");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRmvItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRmvItemActionPerformed

        DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();
        if (dtm.getRowCount() > 0) {
            try {
                dtm.removeRow(tblGRN.getSelectedRow());
                txtTotal.setText(this.calTotal(tblGRN, 6) + "");
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Please Select a Raw !", "Oops", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "No Data Available !", "Oops", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnRmvItemActionPerformed

    private void btnRmvAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRmvAllActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();
        dtm.setRowCount(0);
        txtTotal.setText(this.calTotal(tblGRN, 6) + "");
    }//GEN-LAST:event_btnRmvAllActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed

        if (dcGRN.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Please Select a Date", "Data Missing", JOptionPane.ERROR_MESSAGE);
        } else {
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            String dt = df.format(dcGRN.getDate());
            boolean stat = this.addGrn(Integer.parseInt(txtGRNNo.getText()), null, Integer.parseInt(txtPOno.getText()), dt, ddlVendor.getSelectedItem().toString(), ddlBatch.getSelectedItem().toString(), Float.parseFloat(txtTotal.getText()));
            if (stat) {
                JOptionPane.showMessageDialog(rootPane, "GRN Added Successfully", "Oparation Complete", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Error in GRN Adding", "Oparation Incomplete", JOptionPane.ERROR);
            }
this.printReport();
            this.clearAll();
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtBPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBPriceKeyTyped
        char c = evt.getKeyChar();
        if (!(c <= '9' && c >= '0' || c == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtBPriceKeyTyped

    private void txtSPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSPriceKeyTyped
        char c = evt.getKeyChar();
        if (!(c <= '9' && c >= '0' || c == '.')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSPriceKeyTyped

    private void txtQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyKeyTyped
        char c = evt.getKeyChar();
        if (!(c <= '9' && c >= '0')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtQtyKeyTyped

    private void txtPOnoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPOnoKeyTyped
        char c = evt.getKeyChar();
        if (!(c <= '9' && c >= '0')) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPOnoKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GRN.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GRN().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnRmvAll;
    private javax.swing.JButton btnRmvItem;
    private com.toedter.calendar.JDateChooser dcGRN;
    private javax.swing.JComboBox ddlBatch;
    private javax.swing.JComboBox ddlVendor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblPID;
    private javax.swing.JTable tblGRN;
    private javax.swing.JTable tblProductSelect;
    private javax.swing.JTextField txtBPrice;
    private javax.swing.JTextField txtGRNNo;
    private javax.swing.JTextField txtGRNSerach;
    private javax.swing.JTextField txtPOno;
    private javax.swing.JTextField txtQty;
    private javax.swing.JTextField txtSPrice;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void setID() {

        int id;
        Grn obj = new Grn();
        id = obj.getLastGRNID();
        id++;
        txtGRNNo.setText(id + "");
        Date date = new Date();
        dcGRN.setDate(date);

    }

    private void loadComboVendor() {
        Vendor Vendorobj = new Vendor();
        ArrayList<Vendor> VendorobjList = Vendorobj.loadVendor();
        if (VendorobjList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Vendors Found.");
        } else {
            Vector v = new Vector();
            Vendor Vendorss = new Vendor();
            int count = 0;
            while (VendorobjList.size() > count) {
                // hiddenValue hv= new hiddenValue();
                Vendorss = VendorobjList.get(count);

                // hv.setVisibleField(Categoryss.getCatName());
                // hv.setHiddenField(Categoryss.getCatID());
                v.add(Vendorss.getV_name());

                count++;
            }
            ddlVendor.setModel(new DefaultComboBoxModel(v));

        }
    }

    private void loadComboBatch() {
        batch Batchobj = new batch();
        ArrayList<batch> BatchobjList = Batchobj.loadbatch();
        if (BatchobjList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Vendors Found.");
        } else {
            Vector v = new Vector();
            batch batchss = new batch();
            int count = 0;
            while (BatchobjList.size() > count) {
                // hiddenValue hv= new hiddenValue();
                batchss = BatchobjList.get(count);

                // hv.setVisibleField(Categoryss.getCatName());
                // hv.setHiddenField(Categoryss.getCatID());
                v.add(batchss.getBname());

                count++;
            }
            ddlBatch.setModel(new DefaultComboBoxModel(v));

        }
    }

    private void loadTableByVendorAndSearch(String text, String Vendor) {
        Products Productsobj = new Products();
        ArrayList<Products> ProductsList = Productsobj.loadProductsByVendor(text, Vendor);
        if (ProductsList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Product Found.");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblProductSelect.getModel();
            dtm.setRowCount(0);
            int count = 0;
            while (ProductsList.size() > count) {
                Vector v = new Vector();
                Products Productss = new Products();
                Productss = ProductsList.get(count);

                v.add(Productss.getPID());
                v.add(Productss.getDescription());

                dtm.addRow(v);
                count++;

            }
        }

    }

    private float calTotal(JTable tblGRN, int col) {
        float total = 0;
        DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();
        for (int i = 0; tblGRN.getRowCount() > i; i++) {
            total += Float.parseFloat(dtm.getValueAt(i, col).toString());
        }
        return total;
    }

    private boolean addGrn(int id, String type, int pono, String date, String Vendor, String Batch, float total) {
        boolean status;
        Grn obj = new Grn();
        obj.setGRNno(id);
        obj.setGRNtype(type);
        obj.setPoNo(pono);
        obj.setGrnDate(date);
        obj.setVendorName(Vendor);
        obj.setBatch(Batch);
        obj.setTotal(total);

        status = obj.addGrn(obj);
        if (status) {
            status = addGrnregistryBulk(obj);
        }
        if (status) {
            status = stockSaveProcess();
        }

        return status;
    }

    private boolean addGrnregistryBulk(Grn obj) {
        ArrayList<GrnRegistry> list = new ArrayList<GrnRegistry>();
        DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();

        for (int raw_id = 0; tblGRN.getRowCount() > raw_id; raw_id++) {
            GrnRegistry regObj = new GrnRegistry();
            regObj.setGRNno(obj.getGRNno());
            regObj.setBatch(ddlBatch.getSelectedItem().toString());
            regObj.setPID(Integer.parseInt(dtm.getValueAt(raw_id, 1).toString()));
            regObj.setPDescription(dtm.getValueAt(raw_id, 2).toString());
            regObj.setBPrice(Float.parseFloat(dtm.getValueAt(raw_id, 3).toString()));
            regObj.setSPrice(Float.parseFloat(dtm.getValueAt(raw_id, 4).toString()));
            regObj.setQty(Integer.parseInt(dtm.getValueAt(raw_id, 5).toString()));
            regObj.setAmount(Float.parseFloat(dtm.getValueAt(raw_id, 6).toString()));

            list.add(regObj);
        }
        GrnRegistry PRobj = new GrnRegistry();
        boolean stat = PRobj.addGrnRegistryBulk(list);
        return stat;
    }

    private void clearAll() {
        DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();
        dtm.setRowCount(0);
        loadComboVendor();
        txtTotal.setText("");
        setID();
    }

    public boolean addStock(int PID, String Batch, String Category, String VendorName, int Qty, float BPrice, float SPrice, String PDescription) {
        Stocks obj = new Stocks();
        obj.setPID(PID);
        obj.setBatch(Batch);
        obj.setCatname(Category);
        obj.setVendorName(VendorName);
        obj.setQty(Qty);
        obj.setBprice(BPrice);
        obj.setSprice(SPrice);
        obj.setDescription(PDescription);

        return obj.addStock(obj);
    }

    public boolean updateStockQty(int PID, String Batch, int Qty) {
        Stocks obj = new Stocks();
        //this is GRN so the type is 1
        return obj.updateQty(PID, Batch, Qty, 1);
    }

    public boolean stockSaveProcess() {
        boolean result = false;
        int pid;
        String Batch = ddlBatch.getSelectedItem().toString();
        Stocks regObj = new Stocks();

        DefaultTableModel dtm = (DefaultTableModel) tblGRN.getModel();

        for (int raw_id = 0; tblGRN.getRowCount() > raw_id; raw_id++) {
            pid = Integer.parseInt(dtm.getValueAt(raw_id, 1).toString());

            if (regObj.isExsist(pid, Batch)) {
                result = updateStockQty(pid, Batch, Integer.parseInt(dtm.getValueAt(raw_id, 5).toString()));
            } else {
                Products pobj = new Products().viewAProducts(Integer.parseInt(dtm.getValueAt(raw_id, 1).toString()));
                regObj.setBatch(Batch);
                regObj.setPID(pid);
                regObj.setDescription(dtm.getValueAt(raw_id, 2).toString());
                regObj.setBprice(Float.parseFloat(dtm.getValueAt(raw_id, 3).toString()));
                regObj.setSprice(Float.parseFloat(dtm.getValueAt(raw_id, 4).toString()));
                regObj.setQty(Integer.parseInt(dtm.getValueAt(raw_id, 5).toString()));
                regObj.setCatname(pobj.getCatname());
                regObj.setVendorName(pobj.getVendorName());

                result = regObj.addStock(regObj);
            }
        }
        return result;
    }
    private void printReport() {
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String dt = df.format(dcGRN.getDate());
        try {
            JRTableModelDataSource ds = new JRTableModelDataSource(tblGRN.getModel());
            String rs = "src\\RPT\\GRN.jrxml";
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("GRNno", txtGRNNo.getText());
            param.put("Vendor", ddlVendor.getSelectedItem().toString());
            param.put("pono", txtPOno.getText());
            param.put("In_date", dt);
            
            param.put("Total", txtTotal.getText());
           

            JasperReport jr = JasperCompileManager.compileReport(rs);
            JasperPrint jp = JasperFillManager.fillReport(jr, param, ds);
            JasperViewer.viewReport(jp, false);

        } catch (JRException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

}
