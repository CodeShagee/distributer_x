/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Domain.Categorys;
import Domain.Products;
import Domain.Vendor;
import Domain.hiddenValue;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shiyanrox
 */
public class Product extends javax.swing.JFrame {

    /**
     * Creates new form Product
     */
    public Product() {
        initComponents();
        loadCombo();
        btnDelete.setVisible(false);
        setPid();
        this.loadTable();
        this.loadComboVendor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPID = new javax.swing.JTextField();
        txtPname = new javax.swing.JTextField();
        ddlCategory = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        ddlVendor = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DistributerX: Product");

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Product"));

        jLabel1.setText("Product Code:");

        jLabel2.setText("Description");

        jLabel3.setText("Category");

        txtPID.setEditable(false);

        ddlCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f0c7(0)_32.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Entypo_2716(0)_32.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f014(0)_32.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/FontAwesome_f12d(1)_32.png"))); // NOI18N
        btnClear.setText("Clear All");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel4.setText("Vendor");

        ddlVendor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ddlVendor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPname)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(ddlCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ddlCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ddlVendor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear)
                    .addComponent(btnDelete))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Product Code", "Description", "Category", "Vendor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblProductMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblProduct);
        if (tblProduct.getColumnModel().getColumnCount() > 0) {
            tblProduct.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (txtPID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Product Code cannot be empty!", "Error", JOptionPane.ERROR);
        } else {
            int comp = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (comp == 0) {
                boolean stat = this.deleteProduct(Integer.parseInt(txtPID.getText()));
                if (stat) {
                    JOptionPane.showMessageDialog(rootPane, "Product Delete Successfully", "Oparation Complete", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error in Product Deleting", "Oparation Incomplete", JOptionPane.ERROR);
                }
                this.loadTable();
            } else {
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        this.clearAll();
    }//GEN-LAST:event_btnClearActionPerformed

    private void tblProductMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseReleased
        int id = Integer.parseInt(tblProduct.getModel().getValueAt(tblProduct.getSelectedRow(), 1).toString());
        String item = tblProduct.getModel().getValueAt(tblProduct.getSelectedRow(), 3).toString();
        String itemV = tblProduct.getModel().getValueAt(tblProduct.getSelectedRow(), 4).toString();

        Products obj = new Products();
        Products venObj = obj.viewAProducts(id);
        txtPID.setText(venObj.getPID() + "");
        txtPname.setText(venObj.getDescription());
        ddlCategory.setSelectedItem(item);
        ddlVendor.setSelectedItem(itemV);

        btnSave.setText("Update");
        btnDelete.setVisible(true);
    }//GEN-LAST:event_tblProductMouseReleased

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (txtPID.getText().isEmpty() | txtPname.getText().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Product Code and Description cannot be empty!", "Error", JOptionPane.ERROR);
        } else {
            if (btnSave.getText() == "Save") {
                boolean stat = this.addProduct(Integer.parseInt(txtPID.getText()), txtPname.getText(), ddlCategory.getSelectedItem().toString(), ddlVendor.getSelectedItem().toString());
                if (stat) {
                    JOptionPane.showMessageDialog(rootPane, "Product Added Successfully", "Oparation Complete", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error in Product Adding", "Oparation Incomplete", JOptionPane.ERROR);
                }
            } else {
                boolean stat = this.updateProduct(Integer.parseInt(txtPID.getText()), txtPname.getText(), ddlCategory.getSelectedItem().toString(), ddlVendor.getSelectedItem().toString());
                if (stat) {
                    JOptionPane.showMessageDialog(rootPane, "Product Added Successfully", "Oparation Complete", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Error in Product Adding", "Oparation Incomplete", JOptionPane.ERROR);
                }
            }
            this.loadTable();
            this.clearAll();
            this.loadCombo();
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Product.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Product().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox ddlCategory;
    private javax.swing.JComboBox ddlVendor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtPID;
    private javax.swing.JTextField txtPname;
    // End of variables declaration//GEN-END:variables
private void loadCombo() {
        Categorys Categorysobj = new Categorys();
        ArrayList<Categorys> CategorysList = Categorysobj.loadCategorys();
        if (CategorysList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Category Found.");
        } else {
            Vector v = new Vector();
            Categorys Categoryss = new Categorys();
            int count = 0;
            while (CategorysList.size() > count) {
                // hiddenValue hv= new hiddenValue();
                Categoryss = CategorysList.get(count);

                // hv.setVisibleField(Categoryss.getCatName());
                // hv.setHiddenField(Categoryss.getCatID());
                v.add(Categoryss.getCatName());

                count++;
            }
            ddlCategory.setModel(new DefaultComboBoxModel(v));

        }
    }

    private void loadComboVendor() {
        Vendor Vendorobj = new Vendor();
        ArrayList<Vendor> VendorobjList = Vendorobj.loadVendor();
        if (VendorobjList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Vendors Found.");
        } else {
            Vector v = new Vector();
            Vendor Vendorss = new Vendor();
            int count = 0;
            while (VendorobjList.size() > count) {
                // hiddenValue hv= new hiddenValue();
                Vendorss = VendorobjList.get(count);

                // hv.setVisibleField(Categoryss.getCatName());
                // hv.setHiddenField(Categoryss.getCatID());
                v.add(Vendorss.getV_name());

                count++;
            }
            ddlVendor.setModel(new DefaultComboBoxModel(v));

        }
    }

    private void setPid() {

        int bid;
        Products obj = new Products();
        bid = obj.getLastBID();
        bid++;
        txtPID.setText(bid + "");
    }

    private boolean addProduct(int id, String description, String catname, String vendor) {
        boolean status;
        Products obj = new Products();
        obj.setPID(id);
        obj.setDescription(description);
        obj.setCatname(catname);
        obj.setVendorName(vendor);

        status = obj.addProduct(obj);

        return status;
    }

    private void clearAll() {
        this.setPid();
        txtPname.setText("");
        this.loadCombo();
        this.loadComboVendor();

        btnSave.setText("Save");
        btnDelete.setVisible(false);
    }

    private void loadTable() {
        Products Productsobj = new Products();
        Categorys catob = new Categorys();
        ArrayList<Products> ProductsList = Productsobj.loadProducts();
        if (ProductsList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Product Found.");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblProduct.getModel();
            dtm.setRowCount(0);
            int count = 0;
            while (ProductsList.size() > count) {
                Vector v = new Vector();
                Products Productss = new Products();
                Productss = ProductsList.get(count);
                v.add(count + 1);
                v.add(Productss.getPID());
                v.add(Productss.getDescription());
                v.add(Productss.getCatname());
                v.add(Productss.getVendorName());

                dtm.addRow(v);
                count++;

            }
        }

    }

    private boolean updateProduct(int id, String description, String catname, String vendor) {

        boolean status;
        Products obj = new Products();
        obj.setPID(id);
        obj.setDescription(description);
        obj.setCatname(catname);
        obj.setVendorName(vendor);

        status = obj.updateProduct(obj);

        return status;
    }

    private void SearchProducts(String text) {
        Products vendorobj = new Products();
        ArrayList<Products> ProductsList = vendorobj.searchProducts(text);
        if (ProductsList.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Sorry ! No Products Found.");
        } else {
            DefaultTableModel dtm = (DefaultTableModel) tblProduct.getModel();
            dtm.setRowCount(0);
            int count = 0;
            while (ProductsList.size() > count) {
                Vector v = new Vector();
                Products Productss = new Products();
                Productss = ProductsList.get(count);
                v.add(count + 1);
                v.add(Productss.getPID());
                v.add(Productss.getDescription());
                v.add(Productss.getCatname());

                dtm.addRow(v);
                count++;

            }
        }

    }

    private boolean deleteProduct(int id) {
        Products obj = new Products();
        boolean stat = obj.deleteProduct(id);
        return stat;
    }
}
